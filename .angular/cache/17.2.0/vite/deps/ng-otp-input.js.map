{
  "version": 3,
  "sources": ["../../../../../node_modules/ng-otp-input/fesm2020/ng-otp-input.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 3, 4);\n    i0.ɵɵlistener(\"paste\", function NgOtpInputComponent_div_0_input_1_Template_input_paste_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.handlePaste($event));\n    })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r3 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onKeyUp($event, i_r3));\n    })(\"input\", function NgOtpInputComponent_div_0_input_1_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.onInput($event));\n    })(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r3 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.onKeyDown($event, i_r3));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    i0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2])(\"id\", ctx_r1.getBoxId(i_r3));\n  }\n}\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 2, 9, \"input\", 2);\n    i0.ɵɵpipe(2, \"keys\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"ng-otp-input-wrapper wrapper \", ctx_r0.config.containerClass, \"\");\n    i0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n  }\n}\nclass KeyboardUtil {\n  static ifTab(event) {\n    return this.ifKey(event, 'Tab');\n  }\n  static ifDelete(event) {\n    return this.ifKey(event, 'Delete;Del');\n  }\n  static ifBackspace(event) {\n    return this.ifKey(event, 'Backspace');\n  }\n  static ifRightArrow(event) {\n    return this.ifKey(event, 'ArrowRight;Right');\n  }\n  static ifLeftArrow(event) {\n    return this.ifKey(event, 'ArrowLeft;Left');\n  }\n  static ifSpacebar(event) {\n    return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\n  }\n  static ifKey(event, keys) {\n    let keysToCheck = keys.split(';');\n    return keysToCheck.some(k => k === event.key);\n  }\n}\nclass KeysPipe {\n  transform(value) {\n    return Object.keys(value);\n  }\n}\n/** @nocollapse */\nKeysPipe.ɵfac = function KeysPipe_Factory(t) {\n  return new (t || KeysPipe)();\n};\n/** @nocollapse */\nKeysPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"keys\",\n  type: KeysPipe,\n  pure: true\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeysPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'keys'\n    }]\n  }], null, null);\n})();\nclass NgOtpInputComponent {\n  constructor(keysPipe, document) {\n    this.keysPipe = keysPipe;\n    this.document = document;\n    this.config = {\n      length: 4\n    };\n    // tslint:disable-next-line: no-output-on-prefix\n    this.onInputChange = new EventEmitter();\n    this.inputControls = new Array(this.config.length);\n    this.componentKey = Math.random().toString(36).substring(2) + new Date().getTime().toString(36);\n  }\n  get inputType() {\n    return this.config?.isPasswordInput ? 'password' : this.config?.allowNumbersOnly ? 'tel' : 'text';\n  }\n  ngOnInit() {\n    this.otpForm = new FormGroup({});\n    for (let index = 0; index < this.config.length; index++) {\n      this.otpForm.addControl(this.getControlName(index), new FormControl());\n    }\n    this.otpForm.valueChanges.subscribe(v => {\n      this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n        var val = this.otpForm.controls[k].value;\n        if (val && val.length > 1) {\n          if (val.length >= this.config.length) {\n            this.setValue(val);\n          } else {\n            this.rebuildValue();\n          }\n        }\n      });\n    });\n  }\n  ngAfterViewInit() {\n    if (!this.config.disableAutoFocus) {\n      const containerItem = this.document.getElementById(`c_${this.componentKey}`);\n      if (containerItem) {\n        const ele = containerItem.getElementsByClassName('otp-input')[0];\n        if (ele && ele.focus) {\n          ele.focus();\n        }\n      }\n    }\n  }\n  getControlName(idx) {\n    return `ctrl_${idx}`;\n  }\n  onKeyDown($event, inputIdx) {\n    const prevInputId = this.getBoxId(inputIdx - 1);\n    const currentInputId = this.getBoxId(inputIdx);\n    if (KeyboardUtil.ifSpacebar($event)) {\n      $event.preventDefault();\n      return false;\n    }\n    if (KeyboardUtil.ifBackspace($event)) {\n      if (!$event.target.value) {\n        this.clearInput(prevInputId, inputIdx - 1);\n        this.setSelected(prevInputId);\n      } else {\n        this.clearInput(currentInputId, inputIdx);\n      }\n      this.rebuildValue();\n      return;\n    }\n  }\n  onInput($event) {\n    let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\n    if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\n      $event.target.value = '';\n      $event.stopPropagation();\n      $event.preventDefault();\n      return;\n    }\n  }\n  onKeyUp($event, inputIdx) {\n    if (KeyboardUtil.ifTab($event)) {\n      inputIdx -= 1;\n    }\n    const nextInputId = this.getBoxId(inputIdx + 1);\n    const prevInputId = this.getBoxId(inputIdx - 1);\n    const currentInputId = this.getBoxId(inputIdx);\n    if (KeyboardUtil.ifRightArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(nextInputId);\n      return;\n    }\n    if (KeyboardUtil.ifLeftArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(prevInputId);\n      return;\n    }\n    if (KeyboardUtil.ifDelete($event)) {\n      if (!$event.target.value) {\n        this.clearInput(prevInputId, inputIdx - 1);\n        this.setSelected(prevInputId);\n      } else {\n        this.clearInput(currentInputId, inputIdx);\n      }\n      this.rebuildValue();\n      return;\n    }\n    if (!$event.target.value) {\n      return;\n    }\n    if (this.ifValidKeyCode($event)) {\n      this.setSelected(nextInputId);\n    }\n    this.rebuildValue();\n  }\n  validateNumber(val) {\n    return val && /^[0-9]+$/.test(val);\n  }\n  getBoxId(idx) {\n    return `otp_${idx}_${this.componentKey}`;\n  }\n  clearInput(eleId, inputIdx) {\n    let ctrlName = this.getControlName(inputIdx);\n    this.otpForm.controls[ctrlName]?.setValue(null);\n    const ele = this.document.getElementById(eleId);\n    if (ele && ele instanceof HTMLInputElement) {\n      ele.value = null;\n    }\n  }\n  setSelected(eleId) {\n    this.focusTo(eleId);\n    const ele = this.document.getElementById(eleId);\n    if (ele && ele.setSelectionRange) {\n      setTimeout(() => {\n        ele.setSelectionRange(0, 1);\n      }, 0);\n    }\n  }\n  ifValidKeyCode(event) {\n    const inp = event.key;\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    return isMobile || /[a-zA-Z0-9-_]/.test(inp);\n  }\n  focusTo(eleId) {\n    const ele = this.document.getElementById(eleId);\n    if (ele) {\n      ele.focus();\n    }\n  }\n  // method to set component value\n  setValue(value) {\n    if (this.config.allowNumbersOnly && isNaN(value)) {\n      return;\n    }\n    this.otpForm.reset();\n    if (!value) {\n      this.rebuildValue();\n      return;\n    }\n    value = value.toString().replace(/\\s/g, ''); // remove whitespace\n    Array.from(value).forEach((c, idx) => {\n      if (this.otpForm.get(this.getControlName(idx))) {\n        this.otpForm.get(this.getControlName(idx)).setValue(c);\n      }\n    });\n    if (!this.config.disableAutoFocus) {\n      const containerItem = this.document.getElementById(`c_${this.componentKey}`);\n      var indexOfElementToFocus = value.length < this.config.length ? value.length : this.config.length - 1;\n      let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\n      if (ele && ele.focus) {\n        ele.focus();\n      }\n    }\n    this.rebuildValue();\n  }\n  rebuildValue() {\n    let val = '';\n    this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n      if (this.otpForm.controls[k].value) {\n        let ctrlVal = this.otpForm.controls[k].value;\n        let isLengthExceed = ctrlVal.length > 1;\n        let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\n        ctrlVal = ctrlVal[0];\n        let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\n        if (isCaseTransformEnabled && transformedVal == ctrlVal) {\n          isCaseTransformEnabled = false;\n        } else {\n          ctrlVal = transformedVal;\n        }\n        val += ctrlVal;\n        if (isLengthExceed || isCaseTransformEnabled) {\n          this.otpForm.controls[k].setValue(ctrlVal);\n        }\n      }\n    });\n    if (this.formCtrl?.setValue) {\n      this.formCtrl.setValue(val);\n    }\n    this.onInputChange.emit(val);\n    this.currentVal = val;\n  }\n  handlePaste(e) {\n    // Get pasted data via clipboard API\n    let clipboardData = e.clipboardData || window['clipboardData'];\n    if (clipboardData) {\n      var pastedData = clipboardData.getData('Text');\n    }\n    // Stop data actually being pasted into div\n    e.stopPropagation();\n    e.preventDefault();\n    if (!pastedData || this.config.allowNumbersOnly && !this.validateNumber(pastedData)) {\n      return;\n    }\n    this.setValue(pastedData);\n  }\n}\n/** @nocollapse */\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) {\n  return new (t || NgOtpInputComponent)(i0.ɵɵdirectiveInject(KeysPipe), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n/** @nocollapse */\nNgOtpInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgOtpInputComponent,\n  selectors: [[\"ng-otp-input\"]],\n  inputs: {\n    config: \"config\",\n    formCtrl: \"formCtrl\"\n  },\n  outputs: {\n    onInputChange: \"onInputChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\"], [\"inp\", \"\"]],\n  template: function NgOtpInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgStyle, i2.NgForOf, i3.DefaultValueAccessor, i3.PatternValidator, i3.NgControlStatus, i3.FormControlDirective, KeysPipe],\n  styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-otp-input',\n      template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp [id]=\\\"getBoxId(i)\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\",\n      styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: KeysPipe\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    onInputChange: [{\n      type: Output\n    }],\n    formCtrl: [{\n      type: Input\n    }]\n  });\n})();\nclass NgOtpInputModule {}\n/** @nocollapse */\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) {\n  return new (t || NgOtpInputModule)();\n};\n/** @nocollapse */\nNgOtpInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgOtpInputModule,\n  declarations: [NgOtpInputComponent, KeysPipe],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  exports: [NgOtpInputComponent]\n});\n/** @nocollapse */\nNgOtpInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [KeysPipe],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule],\n      declarations: [NgOtpInputComponent, KeysPipe],\n      exports: [NgOtpInputComponent],\n      providers: [KeysPipe]\n    }]\n  }], null, null);\n})();\nclass Config {}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"],
  "mappings": "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",
  "names": []
}
